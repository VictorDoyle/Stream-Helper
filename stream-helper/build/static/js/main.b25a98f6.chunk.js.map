{"version":3,"sources":["recoil/atoms.js","graphql/operations.js","pages/LandingPage.js","components/Navbar/NavigationBar.js","media/heroBannerImageMain.jpg","media/moviesHeroImage.jpg","media/watchedHeroImage.jpg","media/savedHeroImage.jpg","components/HeroBanner/HeroBanner.js","components/ActionButtons/ActionButtonsMain.js","components/MovieCard/MovieCard.js","components/Infinite/Infinite.js","pages/Homepage.js","hooks/checkUser.js","components/Infinite/InfiniteRecommendations.js","components/providers/AmazonPrimeMovies.js","components/providers/DisneyPlusMovies.js","components/providers/HboMaxMovies.js","components/providers/HuluMovies.js","components/providers/NetflixMovies.js","pages/Movies.js","components/MovieCard/ProfileMovieCard.js","components/Modals/SavedMoviesModal.js","components/Modals/EditUserModal.js","components/Modals/WatchedMoviesModal.js","components/Modals/DislikedMoviesModal.js","pages/Profile.js","pages/WatchedMovies.js","pages/SavedMovies.js","components/ActionButtons/ActionButtons.js","components/CreditCardLOL/CreditCard.js","components/providers/Providers.js","pages/MovieDetail.js","pages/NotFound.js","config/routes.js","App.js","reportWebVitals.js","index.js"],"names":["userState","atom","key","default","SIGNUP","gql","LOGIN","VERIFY","UPDATEUSERPROFILE","ALLMOVIES","WATCHEDMOVIES","SAVEDMOVIES","DISLIKEDMOVIES","FILTEREDLENGTH","USERUPDATE","USERMOVIERECOMMENDATIONS","MOVIEDETAIL","PROVIDERMOVIEQUERY","LandingPage","history","useRecoilState","setUser","useState","isNewUser","setIsNewUser","formShow","setFormShow","email","setEmail","password","setPassword","username","setUsername","useMutation","login","loadingL","loading","errorL","error","dataL","data","signup","loadingS","errorS","useEffect","signinUser","push","submitHandlerLogin","e","a","preventDefault","variables","signinUserEmail","signinUserPassword","submitHandlerSignup","signupUserSignupInput","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","message","className","style","color","Button","onClick","display","Form","Group","controlId","Label","Control","type","placeholder","onChange","target","value","Text","NavigationBar","user","React","description","Navbar","collapseOnSelect","expand","bg","variant","sticky","to","Brand","Toggle","aria-controls","Collapse","id","Nav","Item","HeroBanner","props","homepageHero","heroBanner","moviePageHero","movieBanner","watchedPageHero","watchedBanner","savedPageHero","savedBanner","currentBannerShow","setCurrentBannerShow","location","pathname","console","log","backgroundImage","heroTitle","heroText","heroExplanation","ActionButtonsMain","update","submitLike","addMovieToUserMovieId","addMovieToUserLiked","submitDislike","addMovieToUserDisliked","submitSave","addMovieToUserSaved","submitWatched","addMovieToUserWatched","isActive","warning","size","configure","MovieCard","setIsActive","removeSaved","removeWatched","src","image","onMouseEnter","title","saved","liked","watched","disliked","vote_average","rating","starRatedColor","starDimension","starSpacing","numberOfStars","name","Infinite","allMovies","onLoadMore","Mapper","map","movie","i","dataLength","length","hasMore","next","loader","endMessage","textAlign","Homepage","setAllMovies","take","cursor","setCursor","skip","setSkip","useQuery","allMoviesTake","allMoviesSkip","allMoviesMyCursor","loadingAll","dataAll","fetchMore","categoryId","CheckUser","fetchPolicy","loadingUser","errorUser","dataUser","verifyUser","InfiniteRecommendations","userMovieRecommendations","removeMovies","more","finalList","uniqueList","Set","AmazonPrimeMovies","setUserMovieRecommendations","provideridprop","setMore","providerMovieQueryTake","providerMovieQuerySkip","providerMovieQueryMyCursor","parseInt","providerMovieQueryProviderId","filterLengthProviderId","dataMore","filteredMovies","providerMovieQuery","filter","number","watchproviders","providerId","filterLength","DisneyPlusMovies","HboMaxMovies","providers","errorMore","JSON","stringify","HuluMovies","NetflixMovies","refetch","mounted","useRef","current","setTimeout","Movies","mainImage","moviesHeroImage","setProviderfilter","providerid","setProviderid","userMovieRecommendationsTake","userMovieRecommendationsSkip","userMovieRecommendationsMyCursor","defaultActiveKey","Link","href","eventKey","ProfileMovieCard","SavedMoviesModal","lgShow","setLgShow","savedMovies","setSavedMovies","margin","Modal","show","onHide","aria-labelledby","Header","closeButton","Title","Body","Container","Row","EditUserModal","firstname","lastname","submit","onSubmit","WatchedMoviesModal","watchedMovies","setWatchedMovies","paddingRight","DislikedMoviesModal","dislikedMovies","setDislikedMovies","Profile","setFirstName","setLastName","setUserName","submitProfileEdit","updateUserFirstname","updateUserLastname","updateUserUsername","updateUserEmail","updateUser","Image","rounded","DropdownButton","as","ButtonGroup","Dropdown","WatchedMovies","SavedMovies","ActionButtons","currentMovieDetails","CreditCard","Providers","flatrate","flatRate","logo_path","ProvidersBuy","buy","buyer","MovieDetail","setCurrentMovieDetails","match","params","currentMovieId","creditsParse","setCreditsParse","setProviders","cast","setCast","crew","setCrew","genre","setGenre","movieMovieId","parse","credits","genres","actor","Col","original_language","release_date","overview","Spinner","animation","NotFound","exact","path","component","App","useSetRecoilState","Cookies","get","cookie","routes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","HttpLink","uri","authMiddleware","ApolloLink","operation","forward","setContext","headers","authorization","fetchOptions","credentials","client","ApolloClient","cache","InMemoryCache","typePolicies","Query","fields","keyArgs","merge","existing","incoming","args","readField","merged","slice","existingIdSet","task","has","afterIndex","findIndex","afterId","splice","read","link","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b25a98f6.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport const userState = atom({\n  key: \"userState\",\n  default: null,\n});\n","import { gql } from \"@apollo/client\";\n\n// ================================= USERS ================================\n/**\n * used in\n * \"../pages/LandingPage.js\"\n *   */\nconst SIGNUP = gql`\n  mutation Mutation($signupUserSignupInput: SignupInput) {\n    signupUser(signupInput: $signupUserSignupInput) {\n      id\n      firstname\n      lastname\n      username\n      email\n      token\n    }\n  }\n`;\n/**\n * used in\n * \"../pages/LandingPage.js\"\n *   */\nconst LOGIN = gql`\n  mutation Mutation($signinUserEmail: String!, $signinUserPassword: String!) {\n    signinUser(email: $signinUserEmail, password: $signinUserPassword) {\n      id\n      firstname\n      lastname\n      username\n      email\n    }\n  }\n`;\n/**\n * USED FOR VERIFING USERS ON EACH PAGE\n */\nconst VERIFY = gql`\n  query Query {\n    verifyUser {\n      id\n      firstname\n      lastname\n      username\n      email\n    }\n  }\n`;\n\n/**\n * used in\n * \"../pages/Profile.js\"\n *   */\nconst UPDATEUSERPROFILE = gql`\n  mutation SigninUserMutation(\n    $updateUserFirstname: String\n    $updateUserLastname: String\n    $updateUserUsername: String\n    $updateUserEmail: String\n  ) {\n    updateUser(\n      firstname: $updateUserFirstname\n      lastname: $updateUserLastname\n      username: $updateUserUsername\n      email: $updateUserEmail\n    ) {\n      id\n      firstname\n      lastname\n      username\n      email\n    }\n  }\n`;\n// ================================= MOVIES ================================\n\n/**\n * used in Homepage\n * ../pages/Homepage.js\n */\n\nconst ALLMOVIES = gql`\n  query Query(\n    $allMoviesTake: Int\n    $allMoviesSkip: Int\n    $allMoviesMyCursor: Int\n  ) {\n    allMovies(\n      take: $allMoviesTake\n      skip: $allMoviesSkip\n      myCursor: $allMoviesMyCursor\n    ) {\n      id\n      categoryId\n      title\n      original_language\n      release_date\n      runtime\n      vote_average\n      overview\n      image\n      genres\n    }\n  }\n`;\n\n/**\n * Last movie for paganation used in homepage\n */\nconst LASTMOVIE = gql`\n  query Query {\n    lastMovie {\n      id\n      categoryId\n    }\n  }\n`;\n\nconst WATCHEDMOVIES = gql`\n  query Query {\n    watchedMovies {\n      id\n      title\n      image\n      liked\n      disliked\n      watched\n      saved\n    }\n  }\n`;\n\nconst SAVEDMOVIES = gql`\n  query Query {\n    savedMovies {\n      id\n      title\n      image\n      liked\n      disliked\n      watched\n      saved\n    }\n  }\n`;\n\nconst DISLIKEDMOVIES = gql`\n  query Query {\n    dislikedMovies {\n      id\n      title\n      image\n      liked\n      disliked\n      watched\n      saved\n    }\n  }\n`;\n\nconst LIKEDMOVIES = gql`\n  query Query {\n    likedMovies {\n      id\n      title\n      image\n      liked\n      disliked\n      watched\n      saved\n    }\n  }\n`;\n\nconst FILTEREDLENGTH = gql`\n  query Query($filterLengthProviderId: Int!) {\n    filterLength(providerId: $filterLengthProviderId)\n  }\n`;\n\nconst USERUPDATE = gql`\n  mutation Mutation(\n    $addMovieToUserMovieId: ID\n    $addMovieToUserLiked: Boolean\n    $addMovieToUserDisliked: Boolean\n    $addMovieToUserSaved: Boolean\n    $addMovieToUserWatched: Boolean\n  ) {\n    addMovieToUser(\n      movieId: $addMovieToUserMovieId\n      liked: $addMovieToUserLiked\n      disliked: $addMovieToUserDisliked\n      saved: $addMovieToUserSaved\n      watched: $addMovieToUserWatched\n    ) {\n      id\n    }\n  }\n`;\n\nconst USERMOVIERECOMMENDATIONS = gql`\n  query Query(\n    $userMovieRecommendationsTake: Int\n    $userMovieRecommendationsSkip: Int\n    $userMovieRecommendationsMyCursor: Int\n  ) {\n    userMovieRecommendations(\n      take: $userMovieRecommendationsTake\n      skip: $userMovieRecommendationsSkip\n      myCursor: $userMovieRecommendationsMyCursor\n    ) {\n      id\n      categoryId\n      title\n      original_language\n      release_date\n      runtime\n      vote_average\n      overview\n      image\n    }\n  }\n`;\n\nconst MOVIEDETAIL = gql`\n  query Query($movieMovieId: ID!) {\n    movie(movieId: $movieMovieId) {\n      id\n      categoryId\n      title\n      original_language\n      release_date\n      runtime\n      vote_average\n      overview\n      image\n      genres\n      credits {\n        cast\n      }\n      watchproviders {\n        providers\n      }\n    }\n  }\n`;\n\nconst PROVIDERMOVIEQUERY = gql`\n  query Query(\n    $providerMovieQueryTake: Int\n    $providerMovieQuerySkip: Int\n    $providerMovieQueryMyCursor: Int\n    $providerMovieQueryProviderId: Int\n  ) {\n    providerMovieQuery(\n      take: $providerMovieQueryTake\n      skip: $providerMovieQuerySkip\n      myCursor: $providerMovieQueryMyCursor\n      providerId: $providerMovieQueryProviderId\n    ) {\n      id\n      categoryId\n      title\n      original_language\n      release_date\n      runtime\n      vote_average\n      overview\n      image\n      genres\n      watchproviders {\n        providerId\n        id\n      }\n    }\n  }\n`;\n\nexport {\n  SIGNUP,\n  VERIFY,\n  LOGIN,\n  MOVIEDETAIL,\n  ALLMOVIES,\n  LASTMOVIE,\n  WATCHEDMOVIES,\n  SAVEDMOVIES,\n  DISLIKEDMOVIES,\n  USERMOVIERECOMMENDATIONS,\n  USERUPDATE,\n  UPDATEUSERPROFILE,\n  LIKEDMOVIES,\n  PROVIDERMOVIEQUERY,\n  FILTEREDLENGTH,\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"../styles/LandingPage.css\";\n/* vendor imports */\nimport { useMutation } from \"@apollo/client\";\nimport { useRecoilState } from \"recoil\";\nimport { userState } from \"../recoil/atoms\";\nimport { SIGNUP, LOGIN } from \"../graphql/operations\";\nimport { toast } from \"react-toastify\";\nimport { Form, Button } from \"react-bootstrap\";\n\nfunction LandingPage({ history }) {\n  const [user, setUser] = useRecoilState(userState);\n\n  const [isNewUser, setIsNewUser] = useState(false);\n  /* show info about App if true */\n  const [knowMore, setKnowMore] = useState(false);\n  const [formShow, setFormShow] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n\n  const [\n    login,\n    { loading: loadingL, error: errorL, data: dataL },\n  ] = useMutation(LOGIN);\n  const [\n    signup,\n    { loading: loadingS, error: errorS, data: dataS },\n  ] = useMutation(SIGNUP);\n\n  useEffect(() => {\n    if (!loadingL && dataL) {\n      const { signinUser } = dataL;\n      setUser(signinUser);\n      history.push(\"/home\");\n    }\n  }, [dataL]);\n\n  useEffect(() => {\n    if (!loadingS && dataS) {\n    }\n  }, [dataL]);\n\n  const submitHandlerLogin = async (e) => {\n    e.preventDefault();\n    await login({\n      variables: {\n        signinUserEmail: email,\n        signinUserPassword: password,\n      },\n    });\n  };\n\n  const submitHandlerSignup = async (e) => {\n    e.preventDefault();\n    await signup({\n      variables: {\n        signupUserSignupInput: {\n          email: email,\n          username: username,\n          password: password,\n        },\n      },\n    });\n    toast.success(\"\tUser created\", {\n      position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined,\n    });\n    setIsNewUser(false);\n  };\n\n  if (loadingS) return \"Loading...\";\n  if (errorS) return `Error! ${errorS.message}`;\n  if (loadingL) return \"Loading...\";\n  if (errorL) return `Error! ${errorL.message}`;\n\n  return (\n    <>\n      <div className=\"landingContentGrid\" style={{ color: \"black\" }}>\n        <div className=\"landingLeftCol\">\n          <div className=\"landingLeftText\">\n            <h1 className=\"landingTitle\">\n              {\" \"}\n              A Movie Finder App To Save You Time\n            </h1>\n            <h3 className=\"landingSubTitle\">\n              {\" \"}\n              We'll Recommend You Movies You'd Like <br /> Without Showing You\n              Those You've already Seen\n            </h3>\n            <div className=\"landingButtonsContainer\">\n            <Button\n              className=\"landingPageButton\"\n              onClick={() => {\n                setIsNewUser(true);\n                setFormShow(false);\n              }}\n            >\n              {\" \"}\n              Register{\" \"}\n            </Button>\n            <Button\n              className=\"landingPageButton\"\n              onClick={() => {\n                setIsNewUser(false);\n                setFormShow(false);\n              }}\n            >\n              {\" \"}\n              Already A Member?{\" \"}\n            </Button>\n            <Button\n              className=\"landingPageButton\"\n              onClick={() => {\n                setIsNewUser(true);\n                setFormShow(true);\n              }}\n            >\n              {\" \"}\n              Learn More{\" \"}\n            </Button>\n            </div>\n          </div>\n        </div>\n        <div className=\"landingRightCol\">\n          {isNewUser === false ? (\n            /* if user clicks login -> */\n            <div className=\"landingPageForm\">\n              <div className=\"formShowToggle\" style={{ display: formShow }}>\n                <Form.Group controlId=\"formBasicEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    onChange={(e) => setEmail(e.target.value)}\n                  />\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    onChange={(e) => setPassword(e.target.value)}\n                  />\n                </Form.Group>\n\n                <Button type=\"submit\" onClick={submitHandlerLogin}>\n                  {\" \"}\n                  Login{\" \"}\n                </Button>\n              </div>\n            </div>\n          ) : (\n            /* if user clicks register -> */\n            <div className=\"landingPageForm\">\n              <div className=\"formShowToggle\" style={{ display: formShow }}>\n                <Form.Group controlId=\"formBasicEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    onChange={(e) => setEmail(e.target.value)}\n                  />\n                  <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n                  </Form.Text>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicUsername\">\n                  <Form.Label>Username</Form.Label>\n                  <Form.Control\n                    type=\"username\"\n                    placeholder=\"Username\"\n                    onChange={(e) => setUsername(e.target.value)}\n                  />\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    onChange={(e) => setPassword(e.target.value)}\n                  />\n                </Form.Group>\n\n                <Button type=\"submit\" onClick={submitHandlerSignup}>\n                  {\" \"}\n                  Register{\" \"}\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default LandingPage;\n","import React, { useState, useEffect } from \"react\";\n/* vendor imports */\nimport { Link } from \"react-router-dom\";\n/* styling */\nimport \"../../styles/NavigationBar.css\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport { SearchPanel } from \"react-search-panel\";\n/* import userState from Recoil */\nimport { userState } from \"../../recoil/atoms\";\nimport { useRecoilState } from \"recoil\";\n\nfunction NavigationBar() {\n  const [user, setUser] = useRecoilState(userState);\n  const [input, setInput] = React.useState(\"\");\n  const choices = [\n    { key: \"choice1\", description: \"A choice\" },\n    { key: \"choice2\", description: \"Another choice\" },\n    { key: \"choice3\", description: \"A third choice\" },\n  ];\n  const noChoiceItem = { key: \"none\", description: \"None\" };\n  const [selectedChoices, setSelectedChoices] = useState(choices);\n  const [, setSelectedKeys] = useState([]);\n\n  return (\n    <>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" className=\"mainNavBar\" sticky=\"top\">\n        <Link to={\"/home\"}>\n          <Navbar.Brand>StreamHelper</Navbar.Brand>\n        </Link>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Link to={\"/home\"}>\n            <Nav.Item className=\"buttonStyle\"> Home </Nav.Item>\n          </Link>\n\n          <Link to={\"/movies\"}>\n            <Nav.Item className=\"buttonStyle\"> Movies </Nav.Item>\n          </Link>\n\n          <Link to={\"/watched\"}>\n            <Nav.Item className=\"buttonStyle\"> Watched </Nav.Item>\n          </Link>\n\n          <Link to={\"/saved\"}>\n            <Nav.Item className=\"buttonStyle\"> My Saved Movies </Nav.Item>\n          </Link>\n        </Nav>\n        <Link to={`/profile/${user && user.id}`}>\n          <Nav.Item className=\"buttonStyle\"> Profile </Nav.Item>\n        </Link>\n        {/*         <SearchPanel\n          choices={choices}\n          onChange={(event) => setInput(event.target.value)}\n          onSelectionChange={(selected) => setSelectedKeys(selected)}\n          placeholder=\"Search\"\n          selectedChoices={selectedChoices}\n          value={input}\n          noChoiceItem={noChoiceItem}\n        /> */}\n         </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n}\n\nexport default NavigationBar;\n","export default __webpack_public_path__ + \"static/media/heroBannerImageMain.c5ee17d7.jpg\";","export default __webpack_public_path__ + \"static/media/moviesHeroImage.e8d5041e.jpg\";","export default __webpack_public_path__ + \"static/media/watchedHeroImage.756310ae.jpg\";","export default __webpack_public_path__ + \"static/media/savedHeroImage.72553fc5.jpg\";","import React, { useEffect, useState } from 'react'; \n/* styling */\nimport '../../styles/HeroBanner.css'\n/* images */\nimport heroBanner from '../../media/heroBannerImageMain.jpg';\nimport movieBanner from '../../media/moviesHeroImage.jpg';\nimport watchedBanner from '../../media/watchedHeroImage.jpg';\nimport savedBanner from '../../media/savedHeroImage.jpg';\n\n\nfunction HeroBanner(props) {\n    /* hold base images */\n    const homepageHero = heroBanner\n    const moviePageHero = movieBanner\n    const watchedPageHero = watchedBanner\n    const savedPageHero  = savedBanner\n\n\n\n\n    /* updating herobanner by page */\n    const [ currentBannerShow, setCurrentBannerShow ] = useState(heroBanner)\n\n    /* conditional logic on using History check to then change currentBanner */\n    useEffect(() => {\n        if(props.history.location.pathname === \"/home\") {\n            setCurrentBannerShow(homepageHero)\n        } else if(props.history.location.pathname === \"/movies\") {\n            setCurrentBannerShow(moviePageHero)\n        } else if(props.history.location.pathname === \"/watched\") {\n            setCurrentBannerShow(watchedPageHero)\n        } else if(props.history.location.pathname === \"/saved\") {\n            setCurrentBannerShow(savedPageHero)\n        } else return console.log(\"banner check returned\")\n    }, [currentBannerShow])\n\n   \n    return(\n        <>\n        <div className=\"heroImageMain\" style={{backgroundImage: `url(${currentBannerShow})` }}>\n        </div>\n        <div className=\"heroMainText\">\n            <h1 className=\"mainHeroTitle\"> {props.heroTitle} </h1>\n            <h2 className=\"mainHeroSubTitle\">{props.heroText}</h2>\n            <h2 className=\"mainHeroSubTitle\">{props.heroExplanation}</h2>\n        </div>\n        </>\n    )\n}\n\nexport default HeroBanner;","import React, { useEffect, useState } from \"react\";\nimport { ToggleButton, Button, ToggleButtonGroup } from \"react-bootstrap\";\nimport {\n  Bookmark,\n  HandThumbsUp,\n  HandThumbsDown,\n  Check2,\n} from \"react-bootstrap-icons\";\nimport \"../../styles/ActionButtons.css\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport { USERUPDATE } from \"../../graphql/operations\";\nimport Toasty from \"../Toaster/toast\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nfunction ActionButtonsMain(props) {\n  const [update, { loading, error }] = useMutation(USERUPDATE);\n\n  \n  const submitLike = async (e) => {\n    e.preventDefault();\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.id,\n        addMovieToUserLiked: true,\n      },\n    });\n  };\n\n  const submitDislike = async (e) => {\n    e.preventDefault();\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.id,\n        addMovieToUserDisliked: true,\n      },\n    });\n  };\n\n  const submitSave = async () => {\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.id,\n        addMovieToUserSaved: true,\n      },\n    });\n  };\n\n  const removeSaved = async () => {\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.id,\n        addMovieToUserSaved: false,\n      },\n    });\n  };\n\n  const removeWatched = async () => {\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.id,\n        addMovieToUserWatched: false,\n      },\n    });\n  };\n\n  const submitWatched = async (e) => {\n    e.preventDefault();\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.id,\n        addMovieToUserWatched: true,\n      },\n    });\n  };\n\n  useEffect(() => {\n\n  } , [props.isActive])\n\n  return (\n    <>\n    {props.isActive === true ? \n    <div className=\"mainActionButtons\">\n    <Button\n      className=\"mainActionBox\"\n      onClick={() => {\n        submitSave();\n        console.log(\"clicked save\");\n        toast.warning(\"🎥 Movie Saved!\", {\n          className: \"movieSaved\",\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: true,\n          progress: undefined,\n        });\n      }}\n    >\n      {\" \"}\n      <Bookmark\n        color={\"white\"}\n        size={15}\n        className=\"movieDetailHeartIcon\"\n      />{\" \"}\n      Save\n    </Button>\n    <Button\n      className=\"mainActionBox\"\n      onClick={(e) => {\n        submitWatched(e);\n\n        console.log(\"clicked watched\");\n        toast.warning(\"\t👍 Added to Watched\", {\n          className: \"movieSaved\",\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: true,\n          progress: undefined,\n        });\n      }}\n    >\n      {\" \"}\n      <Check2\n        color={\"white\"}\n        size={15}\n        className=\"movieDetailHeartIcon\"\n      />{\" \"}\n      Watched\n    </Button>\n    <Button\n      className=\"mainActionBox\"\n      onClick={(e) => {\n        submitLike(e);\n        console.log(\"clicked like\");\n        toast.warning(\"\t👍 Liked Movie\", {\n          className: \"movieSaved\",\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: true,\n          progress: undefined,\n        });\n      }}\n    >\n      {\" \"}\n      <HandThumbsUp\n        color={\"white\"}\n        size={15}\n        className=\"movieDetailHeartIcon\"\n      />{\" \"}\n      Like\n    </Button>\n    <Button\n      className=\"mainActionBox\"\n      onClick={(e) => {\n        submitDislike(e);\n        console.log(\"clicked discard\");\n        toast.warning(\"\t👎 Disliked Movie\", {\n          className: \"movieSaved\",\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: true,\n          progress: undefined,\n        });\n      }}\n    >\n      {\" \"}\n      <HandThumbsDown\n        color={\"white\"}\n        size={15}\n        className=\"movieDetailHeartIcon\"\n      />{\" \"}\n      Dislike\n    </Button>\n  </div>\n    : <> </>}\n      \n    </>\n  );\n}\n\nexport default ActionButtonsMain;\n","import {\n  EyeSlash,\n  HandThumbsDown,\n  HeartFill,\n  XCircle,\n  XCircleFill,\n} from \"react-bootstrap-icons\";\nimport \"../../styles/MovieCard.css\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { useMutation } from \"@apollo/client\";\nimport { USERUPDATE } from \"../../graphql/operations\";\nimport StarRatings from \"react-star-ratings\";\nimport ActionButtonsMain from \"../ActionButtons/ActionButtonsMain\";\n\ntoast.configure();\n\nfunction MovieCard(props) {\n  const [isActive, setIsActive] = useState(false);\n  const [isInactive, setIsInactive] = useState(true);\n  const [update, { loading, error }] = useMutation(USERUPDATE);\n\n  const removeSaved = async () => {\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.id,\n        addMovieToUserSaved: false,\n      },\n    });\n  };\n\n  const removeWatched = async () => {\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.id,\n        addMovieToUserWatched: false,\n      },\n    });\n  };\n\n  return (\n    <>\n      <div className=\"movieCardMain\">\n        <Link to={`/movie/${props.id}`}>\n          <img\n            src={`https://www.themoviedb.org/t/p/w300_and_h450_bestv2/${props.image}`}\n            className=\"movieImageCard\"\n            onMouseEnter={() => {\n              setIsActive(true);\n            }}\n           \n           \n          />\n        </Link>\n        <h3 className=\"movieCardTitle\">\n          <Link to={`/movie/${props.id}`}>{props.title}</Link>\n        </h3>\n        <p>{props.description}</p>\n        {/* buttons */}\n        {props.saved === true || props.liked === true || props.watched === true || props.disliked === true ? <> </> :\n        <div className=\"movieButtonContainer\">\n        <ActionButtonsMain {...props} isActive = {isActive}  />\n        </div>\n        }\n      \n        <h4 className=\"starRatingsBox\">\n          {\" \"}\n          {props.vote_average ? (\n            <StarRatings\n            \n              rating={props.vote_average / 2}\n              starRatedColor=\"yellow\"\n              starDimension=\"35px\"\n              starSpacing=\"5px\"\n              numberOfStars={5}\n              name=\"rating\"\n            />\n          ) : (\n            <></>\n          )}\n        </h4>\n        \n          <div className=\"movieButtonContainer\">\n            {props.watched === true || props.saved === true ? (\n              <>\n                <div\n                  className=\"removeMovieIcon\"\n                  onClick={() => {\n                    removeWatched();\n                    removeSaved();\n                    setIsActive(false);\n                    toast.warning(\n                      \"\t🎥 Movie No Longer Marked as Watched or Saved\",\n                      {\n                        className: \"movieSaved\",\n                        position: \"top-right\",\n                        autoClose: 5000,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: false,\n                        draggable: true,\n                        progress: undefined,\n                      }\n                    );\n                  }}\n                >\n                  <XCircleFill color=\"rgb(54, 54, 54, 0.85)\" size={32} />\n                </div>\n              </>\n            ) : (\n              <></>\n            )}\n          </div>\n        \n      </div>\n    </>\n  );\n}\n\nexport default MovieCard;\n","import React, { useEffect } from \"react\";\nimport MovieCard from \"../MovieCard/MovieCard\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"../../styles/MovieCard.css\";\n\nconst Infinite = ({ allMovies, onLoadMore }) => {\n  const Mapper = () => (\n    <div className=\"movieCardContainer\">\n      {allMovies.map((movie, i) => (\n        <MovieCard {...movie} key={i + 1} />\n      ))}\n    </div>\n  );\n  //\n  return (\n    <>\n      {allMovies ? (\n        <InfiniteScroll\n          dataLength={allMovies.length}\n          hasMore={true}\n          next={onLoadMore}\n          className=\"scroll\"\n          loader={<h4>Loading...</h4>}\n          endMessage={\n            <p style={{ textAlign: \"center\" }}>\n              <b>End of list</b>\n            </p>\n          }\n        >\n          <Mapper />\n        </InfiniteScroll>\n      ) : (\n        <></>\n      )}\n      <h2>Load More</h2>\n    </>\n  );\n};\n\nexport default Infinite;\n","import React, { useState, useEffect } from \"react\";\nimport NavigationBar from \"../components/Navbar/NavigationBar\";\nimport HeroBanner from \"../components/HeroBanner/HeroBanner\";\n/* styling */\n// import { EyeSlash, HandThumbsDown, HeartFill } from \"react-bootstrap-icons\";\nimport \"../styles/Homepage.css\";\n/* vendor imports */\nimport { useQuery } from \"@apollo/client\";\nimport Infinite from \"../components/Infinite/Infinite\";\n// import CheckUser from \"../hooks/checkUser\";\n\n/* gql */\nimport { ALLMOVIES } from \"../graphql/operations\";\n/* userState via recoil */\n// import { userState } from \"../recoil/atoms\";\n// import { useRecoilState } from \"recoil\";\n\nfunction Homepage({ history }) {\n  /* user state */\n  // const [user] = useRecoilState(userState);\n\n  // console.log(user, \"Current user\");\n  const heroTitle = \"Welcome To StreamHelper\";\n  const heroText =\n    \"Your Homepage Will Always Display Movies You've Seen In Case You Want To Rewatch Them\";\n\n  /* base states */\n  const [allMovies, setAllMovies] = useState([]);\n  const [take] = useState(10);\n  const [cursor, setCursor] = useState(1);\n  const [skip, setSkip] = useState(0);\n\n  const { loading: loadingAll, data: dataAll, fetchMore } = useQuery(\n    ALLMOVIES,\n    {\n      variables: {\n        allMoviesTake: take,\n        allMoviesSkip: skip,\n        allMoviesMyCursor: cursor,\n      },\n    },\n  );\n\n  useEffect(() => {\n    if (!loadingAll && dataAll) {\n      setAllMovies(dataAll.allMovies);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadingAll, dataAll]);\n\n  const bigFetch = () => {\n    fetchMore(\n      {\n        variables: {\n          allMoviesMyCursor: allMovies.length - 1,\n        },\n      },\n      setCursor(allMovies[allMovies.length - 1].categoryId),\n      setSkip(2),\n    );\n  };\n  return (\n    <>\n      <NavigationBar />\n      <HeroBanner heroText={heroText} heroTitle={heroTitle} history={history} />\n      <div className=\"homepageTutorial\">\n        <h3>\n          {\" \"}\n          Gone Are The Days Of Looking For Your Next Movie. <br />\n          With Constant New Movie Recommendations Made Just For You, <br />\n          You'll Always Have Something To Play Next{\" \"}\n        </h3>\n      </div>\n\n      {allMovies.length > 0 ? (\n        <Infinite allMovies={allMovies} onLoadMore={bigFetch} />\n      ) : (\n        <h1> There are No Movies To Load </h1>\n      )}\n    </>\n  );\n}\n\nexport default Homepage;\n","import React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { useRecoilState } from \"recoil\";\nimport { userState } from \"../recoil/atoms\";\nimport { VERIFY } from \"../graphql/operations\";\n\nconst CheckUser = ({ history }) => {\n  const [user, setUser] = useRecoilState(userState);\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(\n    VERIFY,\n    {\n      fetchPolicy: \"network-only\",\n    },\n  );\n\n  useEffect(() => {\n    try {\n      if (!user) {\n        if (!loadingUser && dataUser) {\n          setUser(dataUser.verifyUser);\n        }\n        if (!loadingUser && !user && !dataUser) {\n          history.push(\"/\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, [loadingUser, dataUser]);\n  return <>{errorUser ? errorUser.message : null}</>;\n};\n\nexport default CheckUser;\n","import React, { useEffect, useState } from \"react\";\nimport MovieCard from \"../MovieCard/MovieCard\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"../../styles/MovieCard.css\";\n\nconst InfiniteRecommendations = ({\n  userMovieRecommendations,\n  onLoadMore,\n  error,\n  removeMovies,\n  more,\n}) => {\n  const [hasMore, setHasMore] = useState(more);\n  const Mapper = () => (\n    <div className=\"movieCardContainer\">\n      {finalList.map((movie, i) => (\n        <MovieCard {...movie} key={i + 1} />\n      ))}\n    </div>\n  );\n\n\n  \n  useEffect(() => {\n    console.log('=====RENDERED!');\n\n\n    return removeMovies;\n  }, []);\n\n\n  console.log(removeMovies, \"HERE\")\n\n  let uniqueList = [...new Set(userMovieRecommendations)];\n\n  let finalList = [...uniqueList];\n\n  console.log(more, \"DOES INFINITE HAVE MORE?\");\n\n  return (\n    <>\n      {userMovieRecommendations ? (\n        <InfiniteScroll\n          dataLength={userMovieRecommendations.length}\n          hasMore={more}\n          next={onLoadMore}\n          className=\"scroll\"\n          loader={<h4>Loading...</h4>}\n          endMessage={\n            <p style={{ textAlign: \"center\" }}>\n              <b>End of list</b>\n            </p>\n          }\n        >\n          <Mapper />\n        </InfiniteScroll>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\nexport default InfiniteRecommendations;\n","import React, { useState, useEffect } from \"react\";\n\n/* gql */\nimport { useQuery } from \"@apollo/client\";\nimport {\n  USERMOVIERECOMMENDATIONS,\n  PROVIDERMOVIEQUERY,\n  FILTEREDLENGTH,\n} from \"../../graphql/operations.js\";\n/* vendor imports */\nimport InfiniteRecommendations from \"../Infinite/InfiniteRecommendations\";\n\nfunction AmazonPrimeMovies() {\n  const [userMovieRecommendations, setUserMovieRecommendations] = useState();\n  /* base states */\n  const [take] = useState(10);\n  const [cursor, setCursor] = useState(1);\n  const [skip, setSkip] = useState(0);\n  const [provideridprop, setProvideridprop] = useState(9);\n  const [more, setMore] = useState(false);\n  const { error, loading: loadingAll, data: dataAll, fetchMore } = useQuery(\n    PROVIDERMOVIEQUERY,\n\n    {\n      fetchPolicy: \"network-only\",\n      variables: {\n        providerMovieQueryTake: take,\n        providerMovieQuerySkip: skip,\n        providerMovieQueryMyCursor: parseInt(cursor),\n        providerMovieQueryProviderId: provideridprop,\n      },\n    },\n  );\n\n\n  useEffect(() => {\n    console.log('=====RENDERED!');\n\n\n    return () => console.log('====UNMOUNTED...');\n  }, []);\n\n\n  const { error: errorMore, loading: loadingMore, data: dataMore } = useQuery(\n    FILTEREDLENGTH,\n\n    {\n      variables: {\n        filterLengthProviderId: 384,\n      },\n    },\n  );\n\n  useEffect(() => {\n    if (dataAll) {\n      const filteredMovies = dataAll.providerMovieQuery.filter(\n        (number) => number.watchproviders[0].providerId === provideridprop,\n      );\n      setUserMovieRecommendations(filteredMovies);\n    }\n    if (userMovieRecommendations) {\n      setCursor(\n        userMovieRecommendations[userMovieRecommendations.length - 1]\n          .categoryId,\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadingAll, dataAll]);\n\n\n  useEffect(() => {\n    if (userMovieRecommendations && dataMore) {\n      if (userMovieRecommendations.length < dataMore.filterLength) {\n        setMore(true);\n      } else {\n        setMore(false);\n      }\n    }\n  }, []);\n\n  const bigFetch = () => {\n    fetchMore(\n      {\n        variables: {\n          providerMovieQueryMyCursor: userMovieRecommendations.length,\n        },\n      },\n      setCursor(\n        userMovieRecommendations[userMovieRecommendations.length - 1]\n          .categoryId,\n      ),\n      // setSkip(userMovieRecommendations[userMovieRecommendations.length - 1]),\n    );\n  };\n\n  return (\n    <>\n      {userMovieRecommendations ? (\n        <InfiniteRecommendations\n          error={error}\n          userMovieRecommendations={userMovieRecommendations}\n          onLoadMore={bigFetch}\n          more={more}\n        />\n      ) : (\n        <h1> There are No Movies To Load </h1>\n      )}{\" \"}\n    </>\n  );\n}\n\nexport default AmazonPrimeMovies;\n","import React, { useState, useEffect } from \"react\";\n\n/* gql */\nimport { useQuery } from \"@apollo/client\";\nimport {\n  USERMOVIERECOMMENDATIONS,\n  PROVIDERMOVIEQUERY,\n  FILTEREDLENGTH,\n} from \"../../graphql/operations.js\";\n/* vendor imports */\nimport InfiniteRecommendations from \"../Infinite/InfiniteRecommendations\";\n\nfunction DisneyPlusMovies() {\n  const [userMovieRecommendations, setUserMovieRecommendations] = useState();\n  /* base states */\n  const [take] = useState(10);\n  const [cursor, setCursor] = useState(1);\n  const [skip, setSkip] = useState(0);\n  const [provideridprop, setProvideridprop] = useState(337);\n  const [counter, setCounter] = useState(0);\n  const [more, setMore] = useState(false);\n  const { error, loading: loadingAll, data: dataAll, fetchMore } = useQuery(\n    PROVIDERMOVIEQUERY,\n    /* { fetchPolicy: \"no-cache\" }, */\n\n    {\n      fetchPolicy: \"network-only\",\n      variables: {\n        providerMovieQueryTake: take,\n        providerMovieQuerySkip: skip,\n        providerMovieQueryMyCursor: parseInt(cursor),\n        providerMovieQueryProviderId: parseInt(337),\n      },\n    },\n  );\n\n\n  useEffect(() => {\n    console.log('=====RENDERED!');\n\n\n    return () => console.log('====UNMOUNTED...');\n  }, []);\n\n\n  const { error: errorMore, loading: loadingMore, data: dataMore } = useQuery(\n    FILTEREDLENGTH,\n\n    {\n      variables: {\n        filterLengthProviderId: 384,\n      },\n    },\n  );\n\n  useEffect(() => {\n    if (dataAll) {\n      const filteredMovies = dataAll.providerMovieQuery.filter(\n        (number) => number.watchproviders[0].providerId === provideridprop,\n      );\n      setUserMovieRecommendations(filteredMovies);\n    }\n    if (userMovieRecommendations) {\n      setCursor(\n        userMovieRecommendations[userMovieRecommendations.length - 1]\n          .categoryId,\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadingAll, dataAll]);\n\n  useEffect(() => {\n    if (userMovieRecommendations && dataMore) {\n      if (userMovieRecommendations.length < dataMore.filterLength) {\n        setMore(true);\n      } else {\n        setMore(false);\n      }\n    }\n  }, []);\n\n  const bigFetch = () => {\n    fetchMore(\n      {\n        variables: {\n          providerMovieQueryMyCursor: userMovieRecommendations.length,\n        },\n      },\n      setCursor(\n        userMovieRecommendations[userMovieRecommendations.length - 1]\n          .categoryId,\n      ),\n      // setSkip(userMovieRecommendations[userMovieRecommendations.length - 1]),\n    );\n  };\n\n  return (\n    <>\n      {userMovieRecommendations ? (\n        <InfiniteRecommendations\n          error={error}\n          more={more}\n          userMovieRecommendations={userMovieRecommendations}\n          onLoadMore={bigFetch}\n        />\n      ) : (\n        <h1> There are No Movies To Load </h1>\n      )}{\" \"}\n    </>\n  );\n}\n\nexport default DisneyPlusMovies;\n","import React, { useState, useEffect } from \"react\";\n/* gql */\nimport { useQuery } from \"@apollo/client\";\nimport {\n  USERMOVIERECOMMENDATIONS,\n  PROVIDERMOVIEQUERY,\n  FILTEREDLENGTH,\n} from \"../../graphql/operations.js\";\n/* vendor imports */\nimport InfiniteRecommendations from \"../Infinite/InfiniteRecommendations\";\n\nfunction HboMaxMovies({ providers }) {\n  const [userMovieRecommendations, setUserMovieRecommendations] = useState();\n  /* base states */\n  const [take] = useState(10);\n  const [cursor, setCursor] = useState(1);\n  const [skip, setSkip] = useState(0);\n  const [provideridprop, setProvideridprop] = useState(384);\n  const [counter, setCounter] = useState(0);\n  const [more, setMore] = useState(false);\n  const { error, loading: loadingAll, data: dataAll, fetchMore } = useQuery(\n    PROVIDERMOVIEQUERY,\n    /* { fetchPolicy: \"no-cache\" }, */\n\n    {\n      fetchPolicy: \"network-only\",\n      variables: {\n        providerMovieQueryTake: take,\n        providerMovieQuerySkip: skip,\n        providerMovieQueryMyCursor: parseInt(cursor),\n        providerMovieQueryProviderId: parseInt(384),\n      },\n    },\n  );\n\n  const { error: errorMore, loading: loadingMore, data: dataMore} = useQuery(\n    FILTEREDLENGTH,\n    {\n      variables: {\n        filterLengthProviderId: 384,\n      },\n    },\n  );\n\n  useEffect(() => {\n    if (dataAll) {\n      const filteredMovies = dataAll.providerMovieQuery.filter(\n        (number) => number.watchproviders[0].providerId === provideridprop,\n      );\n      setUserMovieRecommendations(filteredMovies);\n    }\n    console.log(userMovieRecommendations, \"RECOMMENDATIONS\");\n    if (userMovieRecommendations) {\n      setCursor(\n        userMovieRecommendations[userMovieRecommendations.length - 1]\n          .categoryId,\n      );\n      console.log(cursor, \"CURSOR\");\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadingAll, dataAll]);\n\n  console.log(JSON.stringify(error, null, 2), \"PARSED JSON ERR\");\n  console.log(JSON.stringify(errorMore, null, 2), \"PARSED JSON ERR\");\n  console.log(dataMore, \"--------\")\n\n  useEffect(() => {\n    console.log('=====RENDERED!');\n\n\n    return () => console.log('====UNMOUNTED...');\n  }, []);\n\n  useEffect(() => {\n    if (userMovieRecommendations && dataMore) {\n      if (userMovieRecommendations.length < dataMore.filterLength) {\n        setMore(true);\n      } else {\n        setMore(false);\n      }\n    }\n  }, [dataMore]);\n\n  const bigFetch = () => {\n    fetchMore(\n      {\n        variables: {\n          providerMovieQueryMyCursor: userMovieRecommendations.length,\n        },\n      },\n      setCursor(\n        userMovieRecommendations[userMovieRecommendations.length - 1]\n          .categoryId,\n      ),\n      // setSkip(userMovieRecommendations[userMovieRecommendations.length - 1]),\n    );\n  };\n\n  return (\n    <>\n      {userMovieRecommendations ? (\n        <InfiniteRecommendations\n          more={more}\n          error={error}\n          userMovieRecommendations={userMovieRecommendations}\n          onLoadMore={bigFetch}\n        />\n      ) : (\n        <h1> There are No Movies To Load </h1>\n      )}{\" \"}\n    </>\n  );\n}\n\nexport default HboMaxMovies;\n","import React, { useState, useEffect } from \"react\";\n\n/* gql */\nimport { useQuery } from \"@apollo/client\";\nimport {\n  USERMOVIERECOMMENDATIONS,\n  PROVIDERMOVIEQUERY,\n  FILTEREDLENGTH,\n} from \"../../graphql/operations.js\";\n/* vendor imports */\nimport InfiniteRecommendations from \"../Infinite/InfiniteRecommendations\";\n\nfunction HuluMovies({ providers }) {\n  const [userMovieRecommendations, setUserMovieRecommendations] = useState();\n  /* base states */\n  const [take] = useState(10);\n  const [cursor, setCursor] = useState(1);\n  const [skip, setSkip] = useState(0);\n  const [provideridprop, setProvideridprop] = useState(15);\n  const [counter, setCounter] = useState(0);\n  const [more, setMore] = useState(false);\n  const { error, loading: loadingAll, data: dataAll, fetchMore } = useQuery(\n    PROVIDERMOVIEQUERY,\n    /* { fetchPolicy: \"no-cache\" }, */\n\n    {\n      fetchPolicy: \"network-only\",\n      variables: {\n        providerMovieQueryTake: take,\n        providerMovieQuerySkip: skip,\n        providerMovieQueryMyCursor: parseInt(cursor),\n        providerMovieQueryProviderId: 15,\n      },\n    },\n  );\n\n\n  useEffect(() => {\n    console.log('=====RENDERED!');\n\n\n    return () => console.log('====UNMOUNTED...');\n  }, []);\n\n  const { error: errorMore, loading: loadingMore, data: dataMore } = useQuery(\n    FILTEREDLENGTH,\n\n    {\n      variables: {\n        filterLengthProviderId: 384,\n      },\n    },\n  );\n\n  useEffect(() => {\n    if (dataAll) {\n      const filteredMovies = dataAll.providerMovieQuery.filter(\n        (number) => number.watchproviders[0].providerId === provideridprop,\n      );\n      setUserMovieRecommendations(filteredMovies);\n    }\n    if (userMovieRecommendations) {\n      setCursor(\n        userMovieRecommendations[userMovieRecommendations.length - 1]\n          .categoryId,\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadingAll, dataAll]);\n\n  useEffect(() => {\n    if (userMovieRecommendations && dataMore) {\n      if (userMovieRecommendations.length < dataMore.filterLength) {\n        setMore(true);\n      } else {\n        setMore(false);\n      }\n    }\n  }, []);\n\n  console.log(JSON.stringify(error, null, 2), \"PARSED JSON ERR\");\n\n  const bigFetch = () => {\n    fetchMore(\n      {\n        variables: {\n          providerMovieQueryMyCursor: userMovieRecommendations.length,\n        },\n      },\n      setCursor(\n        userMovieRecommendations[userMovieRecommendations.length - 1]\n          .categoryId,\n      ),\n      // setSkip(userMovieRecommendations[userMovieRecommendations.length - 1]),\n    );\n    if (dataMore) {\n      if (userMovieRecommendations.length < dataMore.filterLength) {\n        setMore(true);\n      } else {\n        setMore(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      {userMovieRecommendations ? (\n        <InfiniteRecommendations\n          error={error}\n          userMovieRecommendations={userMovieRecommendations}\n          onLoadMore={bigFetch}\n          more={more}\n        />\n      ) : (\n        <h1> There are No Movies To Load </h1>\n      )}{\" \"}\n    </>\n  );\n}\n\nexport default HuluMovies;\n","import React, { useState, useEffect, useRef } from \"react\";\n\n/* gql */\nimport { useQuery } from \"@apollo/client\";\nimport {\n  USERMOVIERECOMMENDATIONS,\n  PROVIDERMOVIEQUERY,\n  FILTEREDLENGTH,\n} from \"../../graphql/operations.js\";\n/* vendor imports */\nimport InfiniteRecommendations from \"../Infinite/InfiniteRecommendations\";\n\nfunction NetflixMovies({ providers, providerId }) {\n  const [userMovieRecommendations, setUserMovieRecommendations] = useState();\n  /* base states */\n  const [take] = useState(10);\n  const [cursor, setCursor] = useState(1);\n  const [skip, setSkip] = useState(0);\n  const [provideridprop, setProvideridprop] = useState(8);\n  const [more, setMore] = useState(false);\n\n  const { error, loading: loadingAll, data: dataAll, fetchMore } = useQuery(\n    PROVIDERMOVIEQUERY,\n    {\n      fetchPolicy: \"network-only\",\n      variables: {\n        providerMovieQueryTake: take,\n        providerMovieQuerySkip: skip,\n        providerMovieQueryMyCursor: parseInt(cursor),\n        providerMovieQueryProviderId: parseInt(8),\n      },\n    },\n  );\n\n  const { error: errorMore, loading: loadingMore, data: dataMore, refetch } = useQuery(\n    FILTEREDLENGTH,\n\n    {\n      variables: {\n        filterLengthProviderId: 384,\n      },\n    },\n  );\n\n  useEffect(() => {\n    if (dataAll) {\n      const filteredMovies = dataAll.providerMovieQuery.filter(\n        (number) => number.watchproviders[0].providerId === provideridprop,\n      );\n      setUserMovieRecommendations(filteredMovies);\n\n      // setUserMovieRecommendations(dataAll.providerMovieQuery);\n    }\n    if (userMovieRecommendations) {\n      setCursor(\n        userMovieRecommendations[userMovieRecommendations.length - 1]\n          .categoryId,\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadingAll, dataAll]);\n  console.log(userMovieRecommendations);\n\n\n  console.log(more,\" SDFSDFSDFSDFS\")\n\n  useEffect(() => {\n    console.log('=====RENDERED!');\n\n\n    return () => console.log('====UNMOUNTED...');\n  }, []);\n\n\n  useEffect(() => {\n    if (userMovieRecommendations && dataMore) {\n      if (userMovieRecommendations.length < dataMore.filterLength) {\n        setMore(true);\n      } else {\n        setMore(false);\n      }\n    }\n  }, []);\n\n  const bigFetch = () => {\n    fetchMore(\n      {\n        variables: {\n          providerMovieQueryMyCursor: userMovieRecommendations.length,\n        },\n      },\n      setCursor(\n        userMovieRecommendations[userMovieRecommendations.length - 1]\n          .categoryId,\n      ),\n      // setSkip(userMovieRecommendations[userMovieRecommendations.length - 1]),\n    );\n  };\n\n\n  const mounted = useRef(false);\n\n  useEffect(() => {\n    mounted.current = true;\n    return () => (mounted.current = false);\n  });\n\n\n  const removeMovies = () => {\n    setTimeout(() => {\n      if (mounted.current) {\n        setUserMovieRecommendations(\"\");\n      }\n    }, 1000);\n  };\n\n  return (\n    <>\n      {userMovieRecommendations ? (\n        <InfiniteRecommendations\n          error={error}\n          userMovieRecommendations={userMovieRecommendations}\n          onLoadMore={bigFetch}\n          more={more}\n          removeMovies = {removeMovies}\n        />\n      ) : (\n        <h1> There are No Movies To Load </h1>\n      )}{\" \"}\n    </>\n  );\n}\n\nexport default NetflixMovies;\n","import React, { useState, useEffect } from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport { userState } from \"../recoil/atoms\";\nimport { useRecoilState } from \"recoil\";\n/* components */\nimport NavigationBar from \"../components/Navbar/NavigationBar\";\nimport HeroBanner from \"../components/HeroBanner/HeroBanner\";\nimport moviesHeroImage from \"../media/moviesHeroImage.jpg\";\n// import MovieCard from \"../components/MovieCard/MovieCard\";\nimport CheckUser from \"../hooks/checkUser\";\nimport AmazonPrimeMovies from \"../components/providers/AmazonPrimeMovies\";\nimport DisneyPlusMovies from \"../components/providers/DisneyPlusMovies\";\nimport HboMaxMovies from \"../components/providers/HboMaxMovies\";\nimport HuluMovies from \"../components/providers/HuluMovies\";\nimport NetflixMovies from \"../components/providers/NetflixMovies\";\n/* gql */\nimport { useQuery } from \"@apollo/client\";\nimport {\n  USERMOVIERECOMMENDATIONS,\n  PROVIDERMOVIEQUERY,\n} from \"../graphql/operations\";\n/* vendor imports */\nimport InfiniteRecommendations from \"../components/Infinite/InfiniteRecommendations\";\nfunction Movies({ history }) {\n  const [user] = useRecoilState(userState);\n  /* Hero banner content */\n  const heroTitle = \"Find Your Next Movie\";\n  const heroText =\n    \"Click On The Thumbs Down If You Dislike That Recommendation\";\n  const mainImage = { moviesHeroImage };\n  const [userMovieRecommendations, setUserMovieRecommendations] = useState();\n  /* base states */\n  const [take] = useState(10);\n  const [cursor, setCursor] = useState(1);\n  const [skip, setSkip] = useState(0);\n  const [providerfilter, setProviderfilter] = useState(false);\n  const [providerid, setProviderid] = useState();\n\n\n  const { loading: loadingAll, data: dataAll, fetchMore } = useQuery(\n    USERMOVIERECOMMENDATIONS,\n    {\n      variables: {\n        userMovieRecommendationsTake: take,\n        userMovieRecommendationsSkip: skip,\n        userMovieRecommendationsMyCursor: cursor,\n      },\n    },\n  );\n\n  /* CLEANUP USEEFFECT */\n\n  useEffect(() => {\n    console.log('=====RENDERED!');\n\n\n    return () => console.log('====UNMOUNTED...');\n  }, []);\n\n\n  useEffect(() => {\n    if (loadingAll === false && dataAll) {\n      setUserMovieRecommendations(dataAll.userMovieRecommendations);\n    }\n    if (userMovieRecommendations) {\n      setCursor(\n        userMovieRecommendations[userMovieRecommendations.length - 1]\n          .categoryId,\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadingAll, dataAll, providerid]);\n\n  const bigFetch = () => {\n    fetchMore(\n      {\n        variables: {\n          userMovieRecommendationsMyCursor: userMovieRecommendations.length,\n        },\n      },\n      setCursor(\n        userMovieRecommendations[userMovieRecommendations.length - 1]\n          .categoryId,\n      ),\n    );\n  };\n\n  return (\n    <>\n      <NavigationBar />\n      <CheckUser history={history} />\n      <HeroBanner\n        heroText={heroText}\n        heroTitle={heroTitle}\n        mainImage={mainImage}\n        history={history}\n      />\n\n      <Nav variant=\"pills\" defaultActiveKey=\"/home\">\n        <Nav.Item>\n          <Nav.Link\n            onClick={() => {\n              setProviderfilter(false);\n \n            }}\n            href=\"/movies\"\n          >\n            Show All\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link\n            onClick={() => {\n              setProviderid(8);\n              setProviderfilter(true);\n      \n            }}\n            eventKey=\"link-1\"\n          >\n            {\" \"}\n            <img\n              src={`https://www.themoviedb.org/t/p/original/9A1JSVmSxsyaBK4SUFsYVqbAYfW.jpg`}\n              className=\"providersImage\"\n            />\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link\n            onClick={() => {\n              setProviderid(384);\n              setProviderfilter(true);\n     \n            }}\n            eventKey=\"link-2\"\n          >\n            {\" \"}\n            <img\n              src={`https://www.themoviedb.org/t/p/original/aS2zvJWn9mwiCOeaaCkIh4wleZS.jpg`}\n              className=\"providersImage\"\n            />\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link\n            onClick={() => {\n              setProviderid(15);\n              setProviderfilter(true);\n      \n            }}\n            eventKey=\"link-3\"\n          >\n            {\" \"}\n            <img\n              src={`https://www.themoviedb.org/t/p/original//giwM8XX4V2AQb9vsoN7yti82tKK.jpg`}\n              className=\"providersImage\"\n            />\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link\n            onClick={() => {\n              setProviderid(9);\n              setProviderfilter(true);\n      \n            }}\n            eventKey=\"link-4\"\n          >\n            {\" \"}\n            <img\n              src={`https://www.themoviedb.org/t/p/original/68MNrwlkpF7WnmNPXLah69CR5cb.jpg`}\n              className=\"providersImage\"\n            />\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link\n            onClick={() => {\n              setProviderid(337);\n              setProviderfilter(true);\n  \n            }}\n            eventKey=\"link-5\"\n          >\n            {\" \"}\n            <img\n              src={`https://www.themoviedb.org/t/p/original/dgPueyEdOwpQ10fjuhL2WYFQwQs.jpg`}\n              className=\"providersImage\"\n            />\n          </Nav.Link>\n        </Nav.Item>\n      </Nav>\n      <>\n        {!providerid ? (\n          <>\n            <InfiniteRecommendations\n              userMovieRecommendations={userMovieRecommendations}\n              onLoadMore={bigFetch}\n            />\n          </>\n        ) : (\n          <></>\n        )}\n        ;\n      </>\n      <>{providerid === 8 ? <NetflixMovies providerId={8} /> : <></>};</>\n      <>{providerid === 9 ? <AmazonPrimeMovies providerId={9} /> : <></>};</>\n      <>{providerid === 384 ? <HboMaxMovies providerId={384} /> : <></>};</>\n      <>{providerid === 15 ? <HuluMovies providerId={15} /> : <></>};</>\n      <>{providerid === 337 ? <DisneyPlusMovies providerId={337} /> : <></>};</>\n    </>\n  );\n}\n\nexport default Movies;\n","\nimport \"../../styles/ProfileMovieCard.css\";\nimport Toasty from \"../Toaster/toast\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport { USERUPDATE } from \"../../graphql/operations\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Row } from 'react-bootstrap';\ntoast.configure();\n\nfunction ProfileMovieCard(props) {\n\n\n\n  return (\n    <>\n \n\n        <div className=\"profileMovieCard\">\n        <Link to={`/movie/${props.id}`}>\n          <img\n            src={`https://www.themoviedb.org/t/p/w300_and_h450_bestv2/${props.image}`}\n            className=\"profileMovieCardImage\"\n          />\n        </Link>\n        <h3 className=\"profileMovieCardTitle\">\n          <Link to={`/movie/${props.id}`}>{props.title}</Link>\n        </h3>\n        <p>{props.description}</p>\n        <h5>{props.vote_average}</h5>\n        <h5>Genre</h5>  \n        </div>\n\n\n \n    \n\n    </>\n  );\n}\n\nexport default ProfileMovieCard;\n","import React, { useState, useEffect} from 'react'\nimport { Modal, Button, Container, Row } from 'react-bootstrap';\n/* component imports */\nimport ProfileMovieCard from \"../MovieCard/ProfileMovieCard\";\n/* GQL */\nimport { useQuery } from \"@apollo/client\";\nimport { SAVEDMOVIES } from \"../../graphql/operations\";\n\n\nfunction SavedMoviesModal() {\n    const [lgShow, setLgShow] = useState(false);\n\n    const [savedMovies, setSavedMovies] = useState();\n    const { loading, error, data } = useQuery(SAVEDMOVIES);\n\n    useEffect(() => {\n      if (!loading && data) {\n        setSavedMovies(data);\n      }\n    });\n\n    \n  \n    const Mapper = () => (\n      <>\n        {savedMovies.savedMovies.map((movie, i) => (\n            <ProfileMovieCard {...movie} key={i + 1} />\n        ))}\n      </>\n    );\n \n    return(\n        <>\n         <Button style={{ margin: \"25px\"}} onClick={() => setLgShow(true)}>Saved Movies</Button>\n     \n     <Modal\n       size=\"lg\"\n       show={lgShow}\n       onHide={() => setLgShow(false)}\n       aria-labelledby=\"example-modal-sizes-title-lg\"\n     >\n       <Modal.Header closeButton>\n         <Modal.Title id=\"example-modal-sizes-title-lg\">\n           Movies You've Saved \n         </Modal.Title>\n       </Modal.Header>\n       <Modal.Body>\n       <Container>\n          <Row>\n\n        {savedMovies ? <Mapper /> : <h1> error</h1> }\n          </Row>\n        </Container>\n\n       </Modal.Body>\n     </Modal>\n        </>\n    )\n}\n\nexport default SavedMoviesModal","import React, { useState } from \"react\";\nimport { Modal, Button, Form } from \"react-bootstrap\";\n/* styling */\nimport \"../../styles/ProfileEditForm.css\";\n\nfunction EditUserModal({ firstname, lastname, email, username, submit }) {\n  const [lgShow, setLgShow] = useState(false);\n\n  return (\n    <>\n      <Button style={{ margin: \"25px\" }} onClick={() => setLgShow(true)}>\n        Edit Profile\n      </Button>\n      <Modal\n        size=\"lg\"\n        show={lgShow}\n        onHide={() => setLgShow(false)}\n        aria-labelledby=\"example-modal-sizes-title-lg\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"example-modal-sizes-title-lg\">\n            Edit Your Profile &amp; Information\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form className=\"editProfileForm\" onSubmit={submit}>\n            <Form.Group controlId=\"formUpdateFirstName\">\n              <Form.Label>First Name</Form.Label>\n              <Form.Control\n                type=\"firstName\"\n                placeholder=\"Update First Name\"\n                onChange={firstname}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"formUpdateLastName\">\n              <Form.Label>Last Name</Form.Label>\n              <Form.Control\n                type=\"lastName\"\n                placeholder=\"Update Last Name\"\n                onChange={lastname}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"formUpdateEmail\">\n              <Form.Label>Email address</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Update Your email\"\n                onChange={email}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"formUpdateUsername\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                type=\"username\"\n                placeholder=\"Update Your Username\"\n                onChange={username}\n              />\n            </Form.Group>\n\n         \n\n            <Button variant=\"primary\" type=\"submit\">\n              Submit Changes\n            </Button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n}\n\nexport default EditUserModal;\n","import React, { useState, useEffect } from 'react'\nimport { Modal, Button, Container, Row } from 'react-bootstrap';\n/* component imports */\nimport ProfileMovieCard from \"../MovieCard/ProfileMovieCard\";\n/* GQL */\nimport { useQuery } from \"@apollo/client\";\nimport { WATCHEDMOVIES } from \"../../graphql/operations\";\n\nfunction WatchedMoviesModal() {\n    const [lgShow, setLgShow] = useState(false);\n    const [watchedMovies, setWatchedMovies] = useState();\n    const { loading, error, data } = useQuery(WATCHEDMOVIES);\n \n    useEffect(() => {\n      if (!loading && data) {\n        setWatchedMovies(data);\n      }\n    });\n  \n    const Mapper = () => (\n      <>\n \n        {watchedMovies.watchedMovies.map((movie, i) => (\n            <ProfileMovieCard {...movie} key={i + 1} />\n        ))}\n     \n \n \n      </>\n    );\n    return(\n        <>\n       <Button style={{ paddingRight: \"5px\"}} onClick={() => setLgShow(true)}>Watched Movies</Button>\n     \n      <Modal\n        size=\"lg\"\n        show={lgShow}\n        onHide={() => setLgShow(false)}\n        aria-labelledby=\"example-modal-sizes-title-lg\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title color={\"black\"} id=\"example-modal-sizes-title-lg\">\n              Movies You've Watched\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body> \n        <Container>\n          <Row>\n\n       {watchedMovies ? <Mapper /> : <h1> error</h1> } \n          </Row>\n        </Container>\n\n\n\n        </Modal.Body>\n      </Modal>\n        </>\n    )\n}\n\nexport default WatchedMoviesModal","import React, { useState, useEffect } from 'react'\nimport { Modal, Button, Container, Row } from 'react-bootstrap';\n/* component imports */\nimport ProfileMovieCard from \"../MovieCard/ProfileMovieCard\";\n/* GQL */\nimport { useQuery } from \"@apollo/client\";\nimport { DISLIKEDMOVIES } from \"../../graphql/operations\";\n\n\nfunction DislikedMoviesModal() {\n    const [lgShow, setLgShow] = useState(false);\n\n    const [dislikedMovies, setDislikedMovies] = useState();\n    const { loading, error, data } = useQuery(DISLIKEDMOVIES);\n\n    useEffect(() => {\n      if (!loading && data) {\n        setDislikedMovies(data);\n      }\n    });\n \n  \n    const Mapper = () => (\n      <>\n \n        {dislikedMovies.dislikedMovies.map((movie, i) => (\n            <ProfileMovieCard {...movie} key={i + 1} />\n        ))}\n     \n \n \n      </>\n    );\n \n    return(\n        <>\n       <Button  onClick={() => setLgShow(true)}>Disliked Movies</Button>\n     \n      <Modal\n        size=\"lg\"\n        show={lgShow}\n        onHide={() => setLgShow(false)}\n        aria-labelledby=\"example-modal-sizes-title-lg\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title color={\"black\"} id=\"example-modal-sizes-title-lg\">\n              Movies You've Disliked\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body> \n          <Container>\n            <Row>\n\n          {dislikedMovies ? <Mapper /> : <h1> error</h1> }\n            </Row>\n          </Container>\n\n        </Modal.Body>\n      </Modal>\n        </>\n    )\n}\n\nexport default DislikedMoviesModal","import React, { useState, useEffect } from \"react\";\nimport { userState } from \"../recoil/atoms\";\nimport { useRecoilState } from \"recoil\";\nimport CheckUser from \"../hooks/checkUser\";\nimport NavigationBar from \"../components/Navbar/NavigationBar\";\nimport HeroBanner from \"../components/HeroBanner/HeroBanner\";\n/* styling */\nimport {\n  DropdownButton,\n  Dropdown,\n  ButtonGroup,\n  Image,\n  Row,\n  Button,\n} from \"react-bootstrap\";\nimport \"../styles/Profile.css\";\nimport SavedMoviesModal from \"../components/Modals/SavedMoviesModal\";\nimport EditUserModal from \"../components/Modals/EditUserModal\";\nimport Forum from \"../components/forum/Forum\";\nimport WatchedMoviesModal from \"../components/Modals/WatchedMoviesModal\";\nimport DislikedMoviesModal from \"../components/Modals/DislikedMoviesModal\";\n/* GraphQl */\nimport { useMutation } from \"@apollo/client\";\nimport { UPDATEUSERPROFILE } from \"../graphql/operations\";\n\nfunction Profile({ history }) {\n  const [update, { loading, error, data }] = useMutation(UPDATEUSERPROFILE);\n\n  const [user, setUser] = useRecoilState(userState);\n  /* EDIT PROFILE USER  */\n  const [firstname, setFirstName] = useState();\n  const [lastname, setLastName] = useState();\n  const [username, setUserName] = useState();\n  const [email, setEmail] = useState();\n\n  const submitProfileEdit = async () => {\n    console.log(\"submitProfileEdit\");\n    await update({\n      variables: {\n        updateUserFirstname: firstname,\n        updateUserLastname: lastname,\n        updateUserUsername: username,\n        updateUserEmail: email,\n      },\n    });\n  };\n  /* Hero Banner */\n\n  const heroText =\n    \"Edit Your Profile Details Or View Some Of Your Curated Lists Below\";\n  useEffect(() => {\n    if (!loading && data) {\n      setUser(data.updateUser);\n      // history.push(\"/home\");\n    }\n  }, [loading, data]);\n\n  return (\n    <>\n      <NavigationBar />\n      <CheckUser history={history} />\n\n      <>\n        {user && !loading ? (\n          <>\n            <HeroBanner\n              heroText={heroText}\n              heroTitle={`Hey ${user.username}`}\n              history={history}\n            />\n\n            <div className=\"profileContentContainer\">\n              <div className=\"profileContentItems\">\n                {/* user Profile Image */}\n                <Image src=\"\" rounded />\n                <h1>\n                  {\" \"}\n                  User Bio here: A bunch of random string text and Charfield{\" \"}\n                  <br />\n                  content to fill up this space\n                </h1>\n\n                {/* Modal For Liked Movies */}\n                <DropdownButton\n                  as={ButtonGroup}\n                  title=\"Watched/Disliked Movies\"\n                  id=\"bg-nested-dropdown\"\n                >\n                  <Dropdown.Item eventKey=\"1\">\n                    <WatchedMoviesModal />\n                  </Dropdown.Item>\n                  <Dropdown.Item eventKey=\"2\">\n                    <DislikedMoviesModal />\n                  </Dropdown.Item>\n                </DropdownButton>\n\n                {/* Modal For Saved Movies*/}\n                <SavedMoviesModal />\n\n                {/* Modal For Profile Edit */}\n\n                <EditUserModal\n                  firstname={(e) => setFirstName(e.target.value)}\n                  lastname={(e) => setLastName(e.target.value)}\n                  email={(e) => setEmail(e.target.value)}\n                  username={(e) => setUserName(e.target.value)}\n                  submit={submitProfileEdit}\n                />\n              </div>\n            </div>\n          </>\n        ) : (\n          <></>\n        )}\n      </>\n    </>\n  );\n}\n\nexport default Profile;\n","import React, { useEffect, useState } from \"react\";\nimport NavigationBar from \"../components/Navbar/NavigationBar\";\nimport MovieCard from \"../components/MovieCard/MovieCard\";\nimport HeroBanner from \"../components/HeroBanner/HeroBanner\";\nimport CheckUser from \"../hooks/checkUser\";\nimport { useQuery } from \"@apollo/client\";\nimport { userState } from \"../recoil/atoms\";\nimport { useRecoilState } from \"recoil\";\n\nimport { WATCHEDMOVIES } from \"../graphql/operations\";\n\nfunction WatchedMovies({ history }) {\n  const [user] = useRecoilState(userState);\n  const [watchedMovies, setWatchedMovies] = useState();\n  const heroTitle = \"Your Watched Movies List\";\n  const heroText = \"These Movies Won't Show Up in your Recommendations\";\n  const { loading, error, data } = useQuery(WATCHEDMOVIES, {\n    fetchPolicy: \"network-only\",\n  });\n\n  useEffect(() => {\n    if (!loading && data) {\n      setWatchedMovies(data);\n    }\n  }, [data]);\n\n  const Mapper = () => (\n    <>\n     \n      {watchedMovies.watchedMovies.map((movie, i) => (\n        <MovieCard {...movie} key={i + 1} />\n      ))}\n    </>\n  );\n  return (\n    <>\n      <NavigationBar />\n      {<CheckUser history={history} />}\n      <HeroBanner heroTitle={heroTitle} heroText={heroText}   history = {history}/>\n      <div className=\"movieCardContainer\">\n        {user ? (\n          <>\n            {error ? <h1>{error}</h1> : null}\n            {watchedMovies ? <Mapper /> : <h1> error</h1>}{\" \"}\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default WatchedMovies;\n","import React, { useEffect, useState } from \"react\";\nimport NavigationBar from \"../components/Navbar/NavigationBar\";\nimport HeroBanner from \"../components/HeroBanner/HeroBanner\";\nimport MovieCard from \"../components/MovieCard/MovieCard\";\nimport CheckUser from \"../hooks/checkUser\";\nimport { userState } from \"../recoil/atoms\";\nimport { useRecoilState } from \"recoil\";\nimport { useQuery } from \"@apollo/client\";\nimport { SAVEDMOVIES } from \"../graphql/operations\";\n\nfunction SavedMovies({ history }) {\n  const heroTitle = \"Your Saved Movies\";\n  const heroText = \"You'll Find All Your Hearted Movies Here.\";\n  const [user] = useRecoilState(userState);\n  const [savedMovies, setSavedMovies] = useState();\n  const { loading, error, data } = useQuery(SAVEDMOVIES, {\n    fetchPolicy: \"network-only\",\n  });\n\n  useEffect(() => {\n    if (!loading && data) {\n      setSavedMovies(data);\n    }\n  });\n\n  const Mapper = () => (\n    <>\n    \n      {savedMovies.savedMovies.map((movie, i) => (\n        <MovieCard {...movie} key={i + 1} />\n      ))}\n    </>\n  );\n\n  return (\n    <>\n      <NavigationBar />\n      <CheckUser history={history} />\n      <HeroBanner heroText={heroText} heroTitle={heroTitle}  history = {history}/>\n      {user ? (\n        <div className=\"movieCardContainer\">\n          {error ? <h1>{error}</h1> : null}\n          {savedMovies ? <Mapper /> : <h1> error</h1>}\n        </div>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n}\n\nexport default SavedMovies;\n","import React, { useState } from \"react\";\nimport { ToggleButton, Button, ToggleButtonGroup } from \"react-bootstrap\";\nimport {\n  Bookmark,\n  HandThumbsUp,\n  HandThumbsDown,\n  Check2,\n} from \"react-bootstrap-icons\";\nimport \"../../styles/ActionButtons.css\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport { USERUPDATE } from \"../../graphql/operations\";\nimport Toasty from \"../Toaster/toast\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nfunction ActionButtons(props) {\n  const [update, { loading, error }] = useMutation(USERUPDATE);\n\n  const submitLike = async (e) => {\n    e.preventDefault();\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.currentMovieDetails.movie.id,\n        addMovieToUserLiked: true,\n      },\n    });\n  };\n\n  const submitDislike = async (e) => {\n    e.preventDefault();\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.currentMovieDetails.movie.id,\n        addMovieToUserDisliked: true,\n      },\n    });\n  };\n\n  const submitSave = async () => {\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.currentMovieDetails.movie.id,\n        addMovieToUserSaved: true,\n      },\n    });\n  };\n\n  const removeSaved = async () => {\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.currentMovieDetails.movie.id,\n        addMovieToUserSaved: false,\n      },\n    });\n  };\n\n  const removeWatched = async () => {\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.currentMovieDetails.movie.id,\n        addMovieToUserWatched: false,\n      },\n    });\n  };\n\n  const submitWatched = async (e) => {\n    e.preventDefault();\n    await update({\n      variables: {\n        addMovieToUserMovieId: props.currentMovieDetails.movie.id,\n        addMovieToUserWatched: true,\n      },\n    });\n  };\n\n  return (\n    <>\n      <div className=\"actionButtonContainer\">\n        <Button\n          className=\"actionButtonBox\"\n          onClick={() => {\n            submitSave();\n\n            console.log(\"clicked save\");\n            toast.warning(\"🎥 Movie Saved!\", {\n              className: \"movieSaved\",\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: false,\n              draggable: true,\n              progress: undefined,\n            });\n          }}\n        >\n          {\" \"}\n          <Bookmark\n            color={\"white\"}\n            size={25}\n            className=\"movieDetailHeartIcon\"\n          />{\" \"}\n          Save\n        </Button>\n        <Button\n          className=\"actionButtonBox\"\n          onClick={(e) => {\n            submitWatched(e);\n\n            console.log(\"clicked watched\");\n            toast.warning(\"\t👍 Added to Watched\", {\n              className: \"movieSaved\",\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: false,\n              draggable: true,\n              progress: undefined,\n            });\n          }}\n        >\n          {\" \"}\n          <Check2\n            color={\"white\"}\n            size={25}\n            className=\"movieDetailHeartIcon\"\n          />{\" \"}\n          Watched\n        </Button>\n        <Button\n          className=\"actionButtonBox\"\n          onClick={(e) => {\n            submitLike(e);\n            console.log(\"clicked like\");\n            toast.warning(\"\t👍 Liked Movie\", {\n              className: \"movieSaved\",\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: false,\n              draggable: true,\n              progress: undefined,\n            });\n          }}\n        >\n          {\" \"}\n          <HandThumbsUp\n            color={\"white\"}\n            size={25}\n            className=\"movieDetailHeartIcon\"\n          />{\" \"}\n          Like\n        </Button>\n        <Button\n          className=\"actionButtonBox\"\n          onClick={(e) => {\n            submitDislike(e);\n            console.log(\"clicked discard\");\n            toast.warning(\"\t👎 Disliked Movie\", {\n              className: \"movieSaved\",\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: false,\n              draggable: true,\n              progress: undefined,\n            });\n          }}\n        >\n          {\" \"}\n          <HandThumbsDown\n            color={\"white\"}\n            size={25}\n            className=\"movieDetailHeartIcon\"\n          />{\" \"}\n          Dislike\n        </Button>\n      </div>\n    </>\n  );\n}\n\nexport default ActionButtons;\n","import React, { useEffect, useState } from \"react\";\nimport \"../../styles/MovieCard.css\";\n\nfunction CreditCard(props) {\n  // console.log(props);\n\n  return (\n    <>\n      <div>\n        <h5>{props.name}</h5>\n      </div>\n    </>\n  );\n}\n\nexport default CreditCard;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport \"../../styles/Providers.css\";\n\nconst Providers = ({ providers }) => {\n  const Mapper = () =>\n    providers.flatrate.map((flatRate) => (\n      <div className=\"providersContainer\">\n        <img\n          src={`https://www.themoviedb.org/t/p/original${flatRate.logo_path}`}\n          className=\"providersImage\"\n        />\n        {/* <p>{flatRate.provider_name}</p> */}\n      </div>\n    ));\n  return (\n    <>\n      <Container>\n        <h5 className=\"providerText\">Streaming here</h5>\n        <div className=\"streamContainer\">\n          <Mapper />\n        </div>\n      </Container>\n    </>\n  );\n};\n\nconst ProvidersBuy = ({ providers }) => {\n  const Mapper = () =>\n    providers.buy.map((buyer) => (\n      <div className=\"providersContainer\">\n        <img\n          src={`https://www.themoviedb.org/t/p/original${buyer.logo_path}`}\n          className=\"providersImage\"\n        />\n        {/* <p>{buyer.provider_name}</p> */}\n      </div>\n    ));\n  return (\n    <>\n      <Container>\n        <h5 className=\"providerText\">Buy or Rent</h5>\n        <div className=\"buyContainer\">\n          <Mapper />\n        </div>\n      </Container>\n    </>\n  );\n};\n\nconst ProvidersRent = ({ providers }) => {\n  const Mapper = () =>\n    providers.rent.map((renter) => (\n      <div className=\"providersContainer\">\n        <img\n          src={`https://www.themoviedb.org/t/p/original${renter.logo_path}`}\n          className=\"providersImage\"\n        />\n        {/* <p>{renter.provider_name}</p> */}\n      </div>\n    ));\n  return (\n    <>\n      <Mapper />\n    </>\n  );\n};\n\nexport { Providers, ProvidersRent, ProvidersBuy };\n","import React, { useEffect, useState } from \"react\";\n/* component imports */\nimport NavigationBar from \"../components/Navbar/NavigationBar\";\n/* gql */\nimport { useQuery } from \"@apollo/client\";\nimport { MOVIEDETAIL } from \"../graphql/operations\";\n/* vendor styles */\nimport { Container, Row, Col, Spinner } from \"react-bootstrap\";\nimport {\n  StarFill,\n  StarHalf,\n  Star,\n  Bookmark,\n  HandThumbsUp,\n  HandThumbsDown,\n  Check2,\n} from \"react-bootstrap-icons\";\nimport StarRatings from \"react-star-ratings\";\nimport \"../styles/MovieDetail.css\";\nimport ActionButtons from \"../components/ActionButtons/ActionButtons\";\nimport CreditCard from \"../components/CreditCardLOL/CreditCard\";\nimport {\n  Providers,\n  ProvidersBuy,\n  // ProvidersRent,\n} from \"../components/providers/Providers\";\n\nfunction MovieDetail(props) {\n  const [currentMovieDetails, setCurrentMovieDetails] = useState();\n  const [currentMovieId, setCurrentMovieId] = useState(props.match.params.id);\n  const [creditsParse, setCreditsParse] = useState({});\n  const [providers, setProviders] = useState();\n  const [cast, setCast] = useState();\n  const [crew, setCrew] = useState();\n  const [genre, setGenre] = useState();\n\n  const { loading, data, error } = useQuery(MOVIEDETAIL, {\n    variables: {\n      movieMovieId: currentMovieId,\n    },\n  });\n\n\n  useEffect(() => {\n    if (!loading && data) {\n      setCurrentMovieDetails(data);\n      setCreditsParse(JSON.parse(data.movie.credits[0].cast));\n      setProviders(JSON.parse(data.movie.watchproviders[0].providers));\n    }\n  }, [data, loading]);\n\n\n\n\n  useEffect(() => {\n    if (creditsParse.cast) {\n      setCast(creditsParse.cast);\n      setCrew(creditsParse.crew);\n    }\n    if (currentMovieDetails) {\n      if (currentMovieDetails.movie.genres === 28) {\n        setGenre(\"Action\");\n      } else if (currentMovieDetails.movie.genres === 12) {\n        setGenre(\"Adventure\");\n      } else if (currentMovieDetails.movie.genres === 16) {\n        setGenre(\"Animation\");\n      } else if (currentMovieDetails.movie.genres === 35) {\n        setGenre(\"Comedy\");\n      } else if (currentMovieDetails.movie.genres === 80) {\n        setGenre(\"Crime\");\n      } else if (currentMovieDetails.movie.genres === 99) {\n        setGenre(\"Documentary\");\n      } else if (currentMovieDetails.movie.genres === 18) {\n        setGenre(\"Drama\");\n      } else if (currentMovieDetails.movie.genres === 10751) {\n        setGenre(\"Family\");\n      } else if (currentMovieDetails.movie.genres === 14) {\n        setGenre(\"Fantasy\");\n      } else if (currentMovieDetails.movie.genres === 36) {\n        setGenre(\"History\");\n      } else if (currentMovieDetails.movie.genres === 27) {\n        setGenre(\"Horror\");\n      } else if (currentMovieDetails.movie.genres === 10402) {\n        setGenre(\"Musical\");\n      } else if (currentMovieDetails.movie.genres === 9648) {\n        setGenre(\"Mystery\");\n      } else if (currentMovieDetails.movie.genres === 10749) {\n        setGenre(\"Romance\");\n      } else if (currentMovieDetails.movie.genres === 878) {\n        setGenre(\"Science Fiction\");\n      } else if (currentMovieDetails.movie.genres === 10770) {\n        setGenre(\"TV Movie\");\n      } else if (currentMovieDetails.movie.genres === 53) {\n        setGenre(\"Thriller\");\n      } else if (currentMovieDetails.movie.genres === 10752) {\n        setGenre(\"War\");\n      } else if (currentMovieDetails.movie.genres === 37) {\n        setGenre(\"Western\");\n      }\n    }\n  }, [creditsParse]);\n\n  const Mapper = () => (\n   <>\n      {cast.map((actor, i) => (\n         <div className=\"creditUniqueDetail\">\n           <CreditCard {...actor} key={i + 1} />\n         </div>\n      ))}\n    </>\n   \n  );\n\n  return (\n    <>\n      <NavigationBar />\n\n      {currentMovieDetails ? (\n        <>\n          <Container className=\"mainMovieDetailContainer\">\n            <Row>\n              {/* SECTION: movie image/rating/base info */}\n              <Col>\n                <img\n                  src={`https://www.themoviedb.org/t/p/w300_and_h450_bestv2/${currentMovieDetails.movie.image}`}\n                  className=\"movieDetailImageCard\"\n                />\n\n                <div className=\"movieDetailRatings\">\n                  <div className=\"movieDetailActionBox\">\n                    <ActionButtons currentMovieDetails={currentMovieDetails} />\n                  </div>\n                  <br />\n                  <br />\n                  <h4>\n                    {\" \"}\n                    Rating: {currentMovieDetails.movie.vote_average / 2}\n                    <StarRatings\n                      rating={currentMovieDetails.movie.vote_average / 2}\n                      starRatedColor=\"yellow\"\n                      starDimension=\"35px\"\n                      starSpacing=\"5px\"\n                      numberOfStars={5}\n                      name=\"rating\"\n                    />\n                  </h4>\n                  <h5>Genre: {genre}</h5>\n                  <h5>\n                    {\" \"}\n                    Original Language:{\" \"}\n                    {currentMovieDetails.movie.original_language}\n                  </h5>\n                  <h5>\n                    {\" \"}\n                    Release Date: {currentMovieDetails.movie.release_date}\n                  </h5>\n                </div>\n              </Col>\n              {/* SECTION: Movie description/cast/runtime/watchproviders */}\n              <div className=\"streamProviderContainer\">\n                <p> Watch Now On:</p>\n                <div className=\"streamProviderBox\">\n                  <Row>\n                    <Col>\n                      <Providers providers={providers} />\n                    </Col>\n                    <Col>\n                      <ProvidersBuy providers={providers} />\n                    </Col>\n                  </Row>\n\n                  {/* <ProvidersRent providers={providers} /> */}\n                </div>\n              </div>\n                  <div className=\"movieDetailContent\">\n                    <h2> {currentMovieDetails.movie.title}</h2>\n                    <h4>\n                      {\" \"}\n                      Synopsis: {currentMovieDetails.movie.overview}\n                    </h4>\n                    {/* <h4> Total Runtime: {currentMovieDetails.movie.runtime} </h4> */}\n                  </div>\n                  <h4 style={{color: \"whitesmoke\"}}>Cast &amp; Crew: </h4>\n                <div className=\"movieDetailCast\">\n                 {cast && crew ? <Mapper /> : null}\n                </div>\n              \n              {/* <Col> Cast &amp; Crew: {cast && crew ? <Mapper /> : null} </Col> */}\n            </Row>\n          \n          </Container>\n        </>\n      ) : (\n        <div className=\"loadingMovieDetail\">\n          <Spinner animation=\"grow\" variant=\"success\" size=\"xxl\" />\n          <Spinner animation=\"grow\" variant=\"success\" size=\"xxl\" />\n          <Spinner animation=\"grow\" variant=\"success\" size=\"xxl\" />\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default MovieDetail;\n","import {  Button, Container, Row } from 'react-bootstrap';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\n\nfunction NotFound() {\n    return(\n        <>\n        <Container>\n            <Row>\n                <h1> There Appears To Be A Glitch In The Matrix... <br/>\n                You Must Have Wondered Onto An Unexisting Page!</h1>\n            </Row>\n\n            <Row>\n                <Link to={'/home'}>\n                <Button> Take The Blue Pill</Button>\n                </Link>\n\n\n                <Link to={'/home'}>\n                <Button variant=\"danger\" > Take The Red Pill</Button>\n                </Link>\n            </Row>\n        </Container>\n        </>\n    )\n}\n\nexport default NotFound","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\n/* page imports*/\nimport LandingPage from \"../pages/LandingPage\";\nimport Homepage from \"../pages/Homepage\";\nimport Movies from \"../pages/Movies\";\nimport Profile from \"../pages/Profile\";\nimport WatchedMovies from \"../pages/WatchedMovies\";\nimport SavedMovies from \"../pages/SavedMovies\";\nimport MovieDetail from \"../pages/MovieDetail\";\nimport NotFound from \"../pages/NotFound\";\n\nexport default (\n  <Switch>\n    <Route exact path=\"/\" component={LandingPage} />\n    <Route path=\"/home\" component={Homepage} />\n    <Route path=\"/movies\" component={Movies} />\n    <Route path=\"/profile/:id\" component={Profile} />\n    <Route path=\"/movie/:id\" component={MovieDetail} />\n    <Route path=\"/watched\" component={WatchedMovies} />\n    <Route path=\"/saved\" component={SavedMovies} />\n    <Route component={NotFound} />\n  </Switch>\n);\n","import routes from './config/routes';\n/* Recoil */\nimport { userState } from \"./recoil/atoms\"\nimport { useSetRecoilState } from \"recoil\"\nimport Cookies from 'js-cookie';\nimport { useEffect } from 'react';\nimport LandingPage from './pages/LandingPage';\n/* testing */\nimport { Redirect } from \"react-router-dom\";\n\n\nfunction App() {\n  const setUser = useSetRecoilState(userState)\n  console.log(Cookies.get().cookie, \"-- user --\")\n\n\n\n\n  return (\n    <>\n     { routes }\n     \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Cookies from \"js-cookie\";\nimport { RecoilRoot } from \"recoil\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n  HttpLink,\n  concat,\n  ApolloLink,\n} from \"@apollo/client\";\n\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:4025/graphql\",\n});\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      authorization: Cookies.get(\"cookie\") || null,\n    },\n\n    fetchOptions: {\n      credentials: \"include\",\n    },\n  });\n\n  return forward(operation);\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          allMovies: {\n            keyArgs: [\"type\"],\n            merge(existing = [], incoming = []) {\n              return [...existing, ...incoming];\n            },\n          },\n          userMovieRecommendations: {\n            keyArgs: [\"type\"],\n            merge(existing = [], incoming = []) {\n              console.log(existing);\n              return [...existing, ...incoming];\n            },\n          },\n          providerMovieQuery: {\n            keyArgs: [\"type\"],\n            merge(existing = [], incoming = [], { args, readField }) {\n              const merged = existing ? existing.slice(0) : [];\n              const existingIdSet = new Set(\n                merged.map((task) => readField(\"id\", task)),\n              );\n              incoming = incoming.filter(\n                (task) => !existingIdSet.has(readField(\"id\", task)),\n              );\n              const afterIndex = merged.findIndex(\n                (task) => args.afterId === readField(\"id\", task),\n              );\n              if (afterIndex >= 0) {\n                merged.splice(afterIndex + 1, 0, ...incoming);\n              } else {\n                merged.push(...incoming);\n              }\n              console.log(merged, \"MERGED\");\n              return merged;\n            },\n\n            read(existing = [], { args, readField }) {\n              // if (existing) {\n              //   const afterIndex = existing.findIndex(\n              //     (task) => args.afterId === readField(\"id\", task),\n              //   );\n              //   console.log(existing);\n              //   if (afterIndex >= 0) {\n              //     const page = existing.slice(\n              //       afterIndex + 1,\n              //       afterIndex + 1 + args.limit,\n              //     );\n              //     if (page && page.length > 0) {\n              //       return page;\n              //     }\n              //   }\n              // }\n              return existing;\n            },\n          },\n        },\n      },\n    },\n  }),\n  link: concat(authMiddleware, httpLink),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ApolloProvider client={client}>\n        <Router>\n          <App />\n        </Router>\n      </ApolloProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}